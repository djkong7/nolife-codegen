/* Generated By:JavaCC: Do not edit this line. NolifeParser.java */
package frontend.parser.nolife;

import java.util.Vector;
import frontend.ast.*;
import frontend.utils.*;

@SuppressWarnings("all")
public class NolifeParser implements NolifeParserConstants {
  private static ASTNodeFactory factory = new ASTNodeFactory();

  static final public ProgramNode program() throws ParseException {
        VariableDeclarationListNode variableDecls = (VariableDeclarationListNode)factory.makeASTNode("VariableDeclarationListNode");;
        RecordDeclListNode recordTypes = (RecordDeclListNode)factory.makeASTNode("RecordDeclListNode");;
        SubProgramDeclListNode subProgDecls = (SubProgramDeclListNode)factory.makeASTNode("SubProgramDeclListNode");
        CompoundStatementNode body;
        Token prog,name;
    prog = jj_consume_token(O_PROGRAM);
    name = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_RECORD:
      recordTypes = recordTypeDecls();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_VAR:
      variableDecls = decls();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FUNCTION:
    case O_PROCEDURE:
      subProgDecls = subprogram_decls();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    body = compound_stmt();
        {if (true) return ((ProgramNode)factory.makeASTNode("ProgramNode"))
                .addName(name.image)
                .addRecordDeclList(recordTypes)
                .addVariableDeclList(variableDecls)
                .addSubProgramDeclList(subProgDecls)
                .addBody(body)
                .addLineNumber(prog.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public RecordDeclListNode recordTypeDecls() throws ParseException {
  RecordDeclListNode records = (RecordDeclListNode)factory.makeASTNode("RecordDeclListNode");;
  RecordElementListNode elements;
  Token rec, name;
    label_1:
    while (true) {
      rec = jj_consume_token(O_RECORD);
      name = jj_consume_token(O_IDENTIFIER);
      jj_consume_token(O_EQ);
      elements = recordElements();
      jj_consume_token(O_END);
      jj_consume_token(O_SEMICOLON);
          RecordDeclarationNode recDecl = ((RecordDeclarationNode)factory.makeASTNode("RecordDeclarationNode"))
                .addRecordName(name.image)
                .addElements(elements)
                .addLineNumber(rec.beginLine);

          records.addRecordDecl(recDecl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_RECORD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
    {if (true) return records;}
    throw new Error("Missing return statement in function");
  }

  static final public RecordElementListNode recordElements() throws ParseException {
  TypeNode typeN;
  Vector<String> idList;
  RecordElementListNode elementList = (RecordElementListNode)factory.makeASTNode("RecordElementListNode");
  Token colon;
    idList = identifier_list();
    colon = jj_consume_token(O_COLON);
    typeN = type();
    RecordElementNode recElem = ((RecordElementNode)factory.makeASTNode("RecordElementNode"))
        .addNames(idList)
        .addTypeNode(typeN)
        .addLineNumber(colon.beginLine);

    elementList.addRecordElement(recElem);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(O_SEMICOLON);
      idList = identifier_list();
      colon = jj_consume_token(O_COLON);
      typeN = type();
      recElem = ((RecordElementNode)factory.makeASTNode("RecordElementNode"))
        .addNames(idList)
        .addTypeNode(typeN)
        .addLineNumber(colon.beginLine);

      elementList.addRecordElement(recElem);
    }
    {if (true) return elementList;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableDeclarationListNode decls() throws ParseException {
        VariableDeclarationListNode declList;
    jj_consume_token(O_VAR);
    declList = decl_list();
                {if (true) return declList;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableDeclarationListNode decl_list() throws ParseException {
        VariableDeclarationListNode declList = (VariableDeclarationListNode)factory.makeASTNode("VariableDeclarationListNode");
        VariableDeclarationNode variableDecl;
        Vector<String> idList;
        TypeNode idType;
        Token semi;
    label_3:
    while (true) {
      idList = identifier_list();
      jj_consume_token(O_COLON);
      idType = type();
      semi = jj_consume_token(O_SEMICOLON);
        variableDecl = ((VariableDeclarationNode)factory.makeASTNode("VariableDeclarationNode"))
                .addIdList(idList)
                .addType(idType)
                .addLineNumber(semi.beginLine);
        declList.addVariableDeclaration(variableDecl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
        {if (true) return declList;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<String> identifier_list() throws ParseException {
        Vector<String> idList = new Vector<String>();
        String name;
        Token id;
    id = jj_consume_token(O_IDENTIFIER);
                name = new String(id.image);
                idList.add(name);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(O_COMMA);
      id = jj_consume_token(O_IDENTIFIER);
                name = new String(id.image);
                idList.add(name);
    }
                {if (true) return idList;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeNode type() throws ParseException {
        TypeNode typeN;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_CHARACTER:
    case O_FLOAT:
    case O_INTEGER:
      typeN = standard_type();
      break;
    case O_ARRAY:
      typeN = array_type();
      break;
    case O_IDENTIFIER:
      typeN = record_type();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return typeN;}
    throw new Error("Missing return statement in function");
  }

  static final public StandardTypeNode standard_type() throws ParseException {
        StandardTypeNode standardType;
        Token stype;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INTEGER:
      stype = jj_consume_token(O_INTEGER);
                        standardType = ((StandardTypeNode)factory.makeASTNode("StandardTypeNode"))
                                .addBasicType(TypeTable.INT_TYPE)
                                .addLineNumber(stype.beginLine);
      break;
    case O_FLOAT:
      stype = jj_consume_token(O_FLOAT);
                        standardType = ((StandardTypeNode)factory.makeASTNode("StandardTypeNode"))
                                .addBasicType(TypeTable.FLOAT_TYPE)
                                .addLineNumber(stype.beginLine);
      break;
    case O_CHARACTER:
      stype = jj_consume_token(O_CHARACTER);
                         standardType = ((StandardTypeNode)factory.makeASTNode("StandardTypeNode"))
                                .addBasicType(TypeTable.CHAR_TYPE)
                                .addLineNumber(stype.beginLine);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return standardType;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayTypeNode array_type() throws ParseException {
        ArrayTypeNode arrayType;
        DimensionNode dimension;
        TypeNode typeNode;
        Token array;
    array = jj_consume_token(O_ARRAY);
    jj_consume_token(O_LBRACKET);
    dimension = dim();
    jj_consume_token(O_RBRACKET);
    jj_consume_token(O_OF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_CHARACTER:
    case O_FLOAT:
    case O_INTEGER:
      typeNode = standard_type();
      break;
    case O_IDENTIFIER:
      typeNode = record_type();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ((ArrayTypeNode)factory.makeASTNode("ArrayTypeNode"))
                        .addDimension(dimension)
                        .addBaseType(typeNode)
                        .addLineNumber(array.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public RecordTypeNode record_type() throws ParseException {
  RecordTypeNode rNode;
  Token  name;
    name = jj_consume_token(O_IDENTIFIER);
        {if (true) return ((RecordTypeNode)factory.makeASTNode("RecordTypeNode"))
                .addRecordName(name.image)
                .addLineNumber(name.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public DimensionNode dim() throws ParseException {
        DimensionNode dimNode;
        Token lower,upper;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INT:
      lower = jj_consume_token(O_INT);
      jj_consume_token(O_DOT);
      jj_consume_token(O_DOT);
      upper = jj_consume_token(O_INT);
                        int lowerBound = Integer.valueOf(lower.image).intValue();
                        int upperBound = Integer.valueOf(upper.image).intValue();

                        dimNode = ((IntegerDimensionNode)factory.makeASTNode("IntegerDimensionNode"))
                                .addLowerBound(lowerBound)
                                .addUpperBound(upperBound)
                                .addLineNumber(lower.beginLine);
      break;
    case O_CHAR:
      lower = jj_consume_token(O_CHAR);
      jj_consume_token(O_DOT);
      jj_consume_token(O_DOT);
      upper = jj_consume_token(O_CHAR);
                        dimNode = ((CharacterDimensionNode)factory.makeASTNode("CharacterDimensionNode"))
                                .addLowerBound(lower.image.charAt(1))
                                        .addUpperBound(upper.image.charAt(1))
                                        .addLineNumber(lower.beginLine);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return dimNode;}
    throw new Error("Missing return statement in function");
  }

  static final public SubProgramDeclListNode subprogram_decls() throws ParseException {
        SubProgramDeclListNode subProgDecls = (SubProgramDeclListNode)factory.makeASTNode("SubProgramDeclListNode");
        SubProgramDeclNode subDecl = null;
    label_5:
    while (true) {
      subDecl = subprogram_decl();
      jj_consume_token(O_SEMICOLON);
                        subProgDecls.addSubProgram(subDecl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_FUNCTION:
      case O_PROCEDURE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
    }
                {if (true) return subProgDecls;}
    throw new Error("Missing return statement in function");
  }

  static final public SubProgramDeclNode subprogram_decl() throws ParseException {
        SubProgramDeclNode declNode;
        VariableDeclarationListNode variableDecls = (VariableDeclarationListNode)factory.makeASTNode("VariableDeclarationListNode");
        CompoundStatementNode body;
    declNode = subprogram_head();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_VAR:
      variableDecls = decls();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    body = compound_stmt();
                {if (true) return declNode.addVariableDeclList(variableDecls)
                        .addBody(body);}
    throw new Error("Missing return statement in function");
  }

  static final public SubProgramDeclNode subprogram_head() throws ParseException {
        SubProgramDeclNode declNode;
        VariableDeclarationListNode paramList = (VariableDeclarationListNode)factory.makeASTNode("VariableDeclarationListNode");
        TypeNode declType;
        Token func,name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FUNCTION:
      func = jj_consume_token(O_FUNCTION);
      name = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LPAREN:
        paramList = arguments();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(O_COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_CHARACTER:
      case O_FLOAT:
      case O_INTEGER:
        declType = standard_type();
        break;
      case O_IDENTIFIER:
        declType = record_type();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_SEMICOLON);
                            declNode = ((SubProgramDeclNode)factory.makeASTNode("FunctionDeclNode"))
                                .addName(name.image)
                                .addParamList(paramList)
                                .addReturnType(declType)
                                .addLineNumber(func.beginLine);
      break;
    case O_PROCEDURE:
      func = jj_consume_token(O_PROCEDURE);
      name = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LPAREN:
        paramList = arguments();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
                            declNode = ((SubProgramDeclNode)factory.makeASTNode("ProcedureDeclNode"))
                                .addName(name.image)
                                .addParamList(paramList)
                                .addLineNumber(func.beginLine);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return declNode;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableDeclarationListNode arguments() throws ParseException {
        VariableDeclarationListNode paramList;
    jj_consume_token(O_LPAREN);
    paramList = parameter_list();
    jj_consume_token(O_RPAREN);
        {if (true) return paramList;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableDeclarationListNode parameter_list() throws ParseException {
        VariableDeclarationListNode paramList = (VariableDeclarationListNode)factory.makeASTNode("VariableDeclarationListNode");
        Vector<String > idList;
        TypeNode idType;
        VariableDeclarationNode paramDecl;
        Token token;
    idList = identifier_list();
    token = jj_consume_token(O_COLON);
    idType = type();
                     paramDecl = ((VariableDeclarationNode)factory.makeASTNode("VariableDeclarationNode"))
                        .addIdList(idList)
                        .addType(idType)
                        .addLineNumber(token.beginLine);

                     paramList.addVariableDeclaration(paramDecl);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(O_SEMICOLON);
      idList = identifier_list();
      token = jj_consume_token(O_COLON);
      idType = type();
                     paramDecl = ((VariableDeclarationNode)factory.makeASTNode("VariableDeclarationNode"))
                        .addIdList(idList)
                        .addType(idType)
                        .addLineNumber(token.beginLine);

                     paramList.addVariableDeclaration(paramDecl);
    }
        {if (true) return paramList;}
    throw new Error("Missing return statement in function");
  }

  static final public CompoundStatementNode compound_stmt() throws ParseException {
        CompoundStatementNode compoundStmt;
        Token token;
    token = jj_consume_token(O_BEGIN);
    compoundStmt = stmt_list();
    jj_consume_token(O_END);
            compoundStmt.setLineNumber(token.beginLine);


                {if (true) return compoundStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public CompoundStatementNode stmt_list() throws ParseException {
        CompoundStatementNode compoundStmt = (CompoundStatementNode)factory.makeASTNode("CompoundStatementNode");
        StatementNode stmtNode;
    stmtNode = stmt();
                compoundStmt.addStatement(stmtNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      jj_consume_token(O_SEMICOLON);
      stmtNode = stmt();
                                compoundStmt.addStatement(stmtNode);
    }
                {if (true) return compoundStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode stmt() throws ParseException {
        StatementNode stmtNode;
        ExpressionNode invocation = null;
    if (jj_2_1(2)) {
      stmtNode = assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_IF:
        stmtNode = if_stmt();
        break;
      case O_WHILE:
        stmtNode = while_stmt();
        break;
      case O_IDENTIFIER:
        invocation = procedure_invocation();
                                stmtNode = ((ProcedureInvocationNode)factory.makeASTNode("ProcedureInvocationNode"))
                                        .addInvocation((InvocationNode)invocation)
                                        .addLineNumber(invocation.getLineNumber());
        break;
      case O_READ:
      case O_WRITE:
        stmtNode = i_o_stmt();
        break;
      case O_BEGIN:
        stmtNode = compound_stmt();
        break;
      case O_RETURN:
        stmtNode = return_stmt();
        break;
      case O_CASE:
        stmtNode = case_stmt();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return stmtNode;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatementNode assignment() throws ParseException {
        AssignmentStatementNode assignStmt;
        VariableReferenceNode lhs;
        ExpressionNode rhs;
        Token token;
    lhs = variable();
    token = jj_consume_token(O_ASSIGN);
    rhs = expr();
    {if (true) return ((AssignmentStatementNode)factory.makeASTNode("AssignmentStatementNode"))
        .addLhs(lhs)
        .addRhs(rhs)
        .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatementNode if_stmt() throws ParseException {
        IfStatementNode ifStmt;
        StatementNode thenStmt;
        StatementNode elseStmt = null;
        ExpressionNode testExpr;
        Token token;
    token = jj_consume_token(O_IF);
    testExpr = expr();
    jj_consume_token(O_THEN);
    thenStmt = stmt();
    if (jj_2_2(2147483647)) {
      jj_consume_token(O_ELSE);
      elseStmt = stmt();
    } else {
      ;
    }
                    {if (true) return (elseStmt != null) ?
                        ((IfStatementNode)factory.makeASTNode("IfStatementNode"))
                                .addTestExpression(testExpr)
                                .addThenStatement(thenStmt)
                                .addElseStatement(elseStmt)
                                .addLineNumber(token.beginLine) :
                            ((IfStatementNode)factory.makeASTNode("IfStatementNode"))
                                .addTestExpression(testExpr)
                                .addThenStatement(thenStmt)
                                .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatementNode while_stmt() throws ParseException {
        WhileStatementNode whileStmt;
        ExpressionNode whileExpr;
        StatementNode controlStmt;
        Token token;
    token = jj_consume_token(O_WHILE);
    whileExpr = expr();
    jj_consume_token(O_DO);
    controlStmt = stmt();
                    {if (true) return ((WhileStatementNode)factory.makeASTNode("WhileStatementNode"))
                        .addWhileExpression(whileExpr)
                        .addControlledStatement(controlStmt)
                        .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public InvocationNode procedure_invocation() throws ParseException {
        InvocationNode invocation ;
        ExpressionListNode exprList = (ExpressionListNode)factory.makeASTNode("ExpressionListNode");
        Token token;
    token = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_NEW:
    case O_NOT:
    case O_NIL:
    case O_LPAREN:
    case O_CHAR:
    case O_IDENTIFIER:
    case O_FLOATCON:
    case O_INT:
      exprList = expr_list();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(O_RPAREN);
                   {if (true) return ((InvocationNode)factory.makeASTNode("InvocationNode"))
                                .addName(token.image)
                                .addActualParameters(exprList)
                                .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode i_o_stmt() throws ParseException {
        StatementNode ioStmt;
        VariableReferenceNode varNode = null;
        ExpressionNode writeExpr = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_READ:
      token = jj_consume_token(O_READ);
      jj_consume_token(O_LPAREN);
      varNode = variable();
      jj_consume_token(O_RPAREN);
                    ioStmt = ((ReadStatementNode)factory.makeASTNode("ReadStatementNode"))
                        .addVariable(varNode)
                        .addLineNumber(token.beginLine);
      break;
    case O_WRITE:
      token = jj_consume_token(O_WRITE);
      jj_consume_token(O_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_NEW:
      case O_NOT:
      case O_NIL:
      case O_LPAREN:
      case O_CHAR:
      case O_IDENTIFIER:
      case O_FLOATCON:
      case O_INT:
        writeExpr = expr();
        break;
      case O_STRING:
        writeExpr = string();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_RPAREN);
                    ioStmt = ((WriteStatementNode)factory.makeASTNode("WriteStatementNode"))
                        .addWriteExpression(writeExpr)
                        .addLineNumber(token.beginLine);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ioStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatementNode return_stmt() throws ParseException {
        ReturnStatementNode returnStmt;
        ExpressionNode exprNode;
        Token token;
    token = jj_consume_token(O_RETURN);
    exprNode = expr();
            {if (true) return ((ReturnStatementNode)factory.makeASTNode("ReturnStatementNode"))
                .addReturnExpression(exprNode)
                .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public CaseStatementNode case_stmt() throws ParseException {
        CaseStatementNode caseStatement;
        ExpressionNode caseExpr;
        CaseElementListNode caseList = (CaseElementListNode)factory.makeASTNode("CaseElementListNode");
        Token token;
    token = jj_consume_token(O_CASE);
    caseExpr = expr();
    jj_consume_token(O_OF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_NIL:
    case O_FLOATCON:
    case O_INT:
      caseList = cases();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(O_END);
                   {if (true) return ((CaseStatementNode)factory.makeASTNode("CaseStatementNode"))
                                .addCaseExpression(caseExpr)
                                .addCaseElementList(caseList)
                                .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public CaseElementListNode cases() throws ParseException {
        CaseElementListNode caseList = (CaseElementListNode)factory.makeASTNode("CaseElementListNode");
        CaseElementNode caseElement;
    caseElement = case_element();
                caseList.addCaseElement(caseElement);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
      jj_consume_token(O_SEMICOLON);
      caseElement = case_element();
                        caseList.addCaseElement(caseElement);
    }
        {if (true) return caseList;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseElementNode case_element() throws ParseException {
        CaseElementNode caseElement;
        StatementNode stmtNode;
        ExpressionListNode caseLabelList;
        Token token;
    caseLabelList = case_labels();
    token = jj_consume_token(O_COLON);
    stmtNode = stmt();
            {if (true) return ((CaseElementNode)factory.makeASTNode("CaseElementNode"))
                .addCaseLabelList(caseLabelList)
                .addStatement(stmtNode)
                .addLineNumber(token.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionListNode case_labels() throws ParseException {
        ExpressionListNode caseLabelList = (ExpressionListNode)factory.makeASTNode("ExpressionListNode");
        ConstantNode constNode = null;
    constNode = constant();
                        caseLabelList.addExpression(constNode);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      jj_consume_token(O_COMMA);
      constNode = constant();
                                caseLabelList.addExpression(constNode);
    }
                {if (true) return caseLabelList;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionListNode expr_list() throws ParseException {
        ExpressionListNode exprList = (ExpressionListNode)factory.makeASTNode("ExpressionListNode");
        ExpressionNode exprNode = null;
    exprNode = expr();
            exprList.addExpression(exprNode);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      jj_consume_token(O_COMMA);
      exprNode = expr();
                   exprList.addExpression(exprNode);
    }
                {if (true) return exprList;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode expr() throws ParseException {
        ExpressionNode exprNode;
        ExpressionNode term1Node = null;
        ExpressionNode exprPrimeNode = null;
    term1Node = term1();
    exprPrimeNode = exprPrime();
            if (exprPrimeNode != null) {
              ((BinaryExpressionNode)exprPrimeNode).addLeftOperand(term1Node);
              exprNode = exprPrimeNode;
            }
            else
              exprNode = term1Node;
            exprNode.setLineNumber(term1Node.getLineNumber());

            {if (true) return exprNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode exprPrime() throws ParseException {
        ExpressionNode exprPrimeNode;
        ExpressionNode term1Node = null;
        ExpressionNode epNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_OR:
      token = jj_consume_token(O_OR);
      term1Node = term1();
      epNode = exprPrime();
                            if (epNode != null)
                              ((BinaryExpressionNode)epNode).addLeftOperand(term1Node);
                            else
                              epNode = term1Node;

                            exprPrimeNode = ((BinaryExpressionNode)factory.makeASTNode("OrExpressionNode"))
                                .addRightOperand(epNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_AND:
      token = jj_consume_token(O_AND);
      term1Node = term1();
      epNode = exprPrime();
                            if (epNode != null)
                              ((BinaryExpressionNode)epNode).addLeftOperand(term1Node);
                            else
                              epNode = term1Node;

                            exprPrimeNode = ((BinaryExpressionNode)factory.makeASTNode("AndExpressionNode"))
                                .addRightOperand(epNode)
                                .addLineNumber(token.beginLine);
      break;
    default:
      jj_la1[27] = jj_gen;
                           exprPrimeNode = null;
    }
                {if (true) return exprPrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term1() throws ParseException {
        ExpressionNode term1Node;
        ExpressionNode term2Node = null;
        ExpressionNode term1PrimeNode = null;
    term2Node = term2();
    term1PrimeNode = term1Prime();
                    if (term1PrimeNode != null) {
                      ((BinaryExpressionNode)term1PrimeNode).addLeftOperand(term2Node);
                      term1Node = term1PrimeNode;
                    }
                    else
                      term1Node = term2Node;

                    term1Node.setLineNumber(term2Node.getLineNumber());

                    {if (true) return term1Node;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term1Prime() throws ParseException {
        ExpressionNode term1PrimeNode;
        ExpressionNode term2Node = null;
        ExpressionNode t1pNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_LT:
      token = jj_consume_token(O_LT);
      term2Node = term2();
      t1pNode = term1Prime();
                            if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).addLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;

                            term1PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("LessThanExpressionNode"))
                                .addRightOperand(t1pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_LE:
      token = jj_consume_token(O_LE);
      term2Node = term2();
      t1pNode = term1Prime();
                            if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).addLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("LessEqualExpressionNode"))
                                .addRightOperand(t1pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_GT:
      token = jj_consume_token(O_GT);
      term2Node = term2();
      t1pNode = term1Prime();
                            if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).addLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;

                            term1PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("GreaterThanExpressionNode"))
                                .addRightOperand(t1pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_GE:
      token = jj_consume_token(O_GE);
      term2Node = term2();
      t1pNode = term1Prime();
                            if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).addLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;

                            term1PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("GreaterEqualExpressionNode"))
                                .addRightOperand(t1pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_NE:
      token = jj_consume_token(O_NE);
      term2Node = term2();
      t1pNode = term1Prime();
                            if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).addLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;

                            term1PrimeNode =((BinaryExpressionNode)factory.makeASTNode("NotEqualExpressionNode"))
                                .addRightOperand(t1pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_EQ:
      token = jj_consume_token(O_EQ);
      term2Node = term2();
      t1pNode = term1Prime();
                            if (t1pNode != null)
                              ((BinaryExpressionNode)t1pNode).addLeftOperand(term2Node);
                            else
                              t1pNode = term2Node;
                            term1PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("EqualExpressionNode"))
                                .addRightOperand(t1pNode)
                                .addLineNumber(token.beginLine);
      break;
    default:
      jj_la1[28] = jj_gen;
                          term1PrimeNode = null;
    }
                {if (true) return term1PrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term2() throws ParseException {
        ExpressionNode term2Node;
        ExpressionNode term3Node = null;
        ExpressionNode term2PrimeNode = null;
    term3Node = term3();
    term2PrimeNode = term2Prime();
                    if (term2PrimeNode != null) {
                      ((BinaryExpressionNode)term2PrimeNode).addLeftOperand(term3Node);
                      term2Node = term2PrimeNode;
                    }
                    else
                      term2Node = term3Node;
                    term2Node.setLineNumber(term3Node.getLineNumber());

                    {if (true) return term2Node;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term2Prime() throws ParseException {
        ExpressionNode term2PrimeNode;
        ExpressionNode term3Node = null;
        ExpressionNode t2pNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_PLUS:
      token = jj_consume_token(O_PLUS);
      term3Node = term3();
      t2pNode = term2Prime();
                            if (t2pNode != null)
                              ((BinaryExpressionNode)t2pNode).addLeftOperand(term3Node);
                            else
                              t2pNode = term3Node;
                            term2PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("AddExpressionNode"))
                                .addRightOperand(t2pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_MINUS:
      token = jj_consume_token(O_MINUS);
      term3Node = term3();
      t2pNode = term2Prime();
                            if (t2pNode != null)
                              ((BinaryExpressionNode)t2pNode).addLeftOperand(term3Node);
                            else
                              t2pNode = term3Node;

                            term2PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("SubtractExpressionNode"))
                                .addRightOperand(t2pNode)
                                .addLineNumber(token.beginLine);
      break;
    default:
      jj_la1[29] = jj_gen;
                        term2PrimeNode = null;
    }
                {if (true) return term2PrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term3() throws ParseException {
        ExpressionNode term3Node;
        ExpressionNode factorNode = null;
        ExpressionNode term3PrimeNode = null;
    factorNode = factor();
    term3PrimeNode = term3Prime();
                    if (term3PrimeNode != null) {
                      ((BinaryExpressionNode)term3PrimeNode).addLeftOperand(factorNode);
                      term3Node = term3PrimeNode;
                    }
                    else
                      term3Node = factorNode;
                    term3Node.setLineNumber(factorNode.getLineNumber());

                    {if (true) return term3Node;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode term3Prime() throws ParseException {
        ExpressionNode term3PrimeNode;
        ExpressionNode factorNode = null;
        ExpressionNode t3pNode = null;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_TIMES:
      token = jj_consume_token(O_TIMES);
      factorNode = factor();
      t3pNode = term3Prime();
                            if (t3pNode != null)
                              ((BinaryExpressionNode)t3pNode).addLeftOperand(factorNode);
                            else
                              t3pNode = factorNode;

                            term3PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("MultiplyExpressionNode"))
                                .addRightOperand(t3pNode)
                                .addLineNumber(token.beginLine);
      break;
    case O_MOD:
      token = jj_consume_token(O_MOD);
      factorNode = factor();
      t3pNode = term3Prime();
                            if (t3pNode != null)
                              ((BinaryExpressionNode)t3pNode).addLeftOperand(factorNode);
                            else
                              t3pNode = factorNode;
                            term3PrimeNode = ((BinaryExpressionNode)factory.makeASTNode("ModExpressionNode"))
                                .addRightOperand(t3pNode)
                                .addLineNumber(token.beginLine);
      break;
    default:
      jj_la1[30] = jj_gen;
                        term3PrimeNode = null;
    }
                {if (true) return term3PrimeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode factor() throws ParseException {
        ExpressionNode factorNode ;
        InvocationNode invocation = null;
        ExpressionNode fNode,exprNode = null;
        VariableReferenceNode varNode = null;
        ExpressionListNode exprList = null;
        Token token, name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_IDENTIFIER:
      token = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LBRACKET:
      case O_LPAREN:
      case O_DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_LBRACKET:
          jj_consume_token(O_LBRACKET);
          exprNode = expr();
          jj_consume_token(O_RBRACKET);
          break;
        case O_LPAREN:
          jj_consume_token(O_LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case O_NEW:
          case O_NOT:
          case O_NIL:
          case O_LPAREN:
          case O_CHAR:
          case O_IDENTIFIER:
          case O_FLOATCON:
          case O_INT:
            exprList = expr_list();
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          jj_consume_token(O_RPAREN);
                                                                        if (exprList == null)
                                                                          exprList = (ExpressionListNode)factory.makeASTNode("ExpressionListNode")
                                                                                                .addLineNumber(token.beginLine);
          break;
        case O_DOT:
          jj_consume_token(O_DOT);
          varNode = variable();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
                                if (exprNode != null) {
                                factorNode = ((ArrayReferenceNode)factory.makeASTNode("ArrayReferenceNode"))
                                        .addName(token.image)
                                        .addSubscript(exprNode)
                                        .addLineNumber(token.beginLine);
                                } else if (exprList != null) {
                                        invocation = ((InvocationNode)factory.makeASTNode("InvocationNode"))
                                                .addName(token.image)
                                                .addActualParameters(exprList)
                                                .addLineNumber(token.beginLine);

                                        factorNode = ((FunctionInvocationNode)factory.makeASTNode("FunctionInvocationNode"))
                                                .addInvocation(invocation)
                                        .addLineNumber(token.beginLine);
                                }
                                else if (varNode != null)
                                {
                                        factorNode = ((RecordReferenceNode)factory.makeASTNode("RecordReferenceNode"))
                                                .addName(token.image)
                                                .addElement(varNode)
                                        .addLineNumber(token.beginLine);
                            }
                        else
                                        factorNode = ((ScalarReferenceNode)factory.makeASTNode("ScalarReferenceNode"))
                                                .addName(token.image)
                                                .addLineNumber(token.beginLine);
      break;
    case O_NEW:
      token = jj_consume_token(O_NEW);
      name = jj_consume_token(O_IDENTIFIER);
                                factorNode = ((RecordInstantiationNode)factory.makeASTNode("RecordInstantiationNode"))
                                        .addRecordName(name.image)
                                        .addLineNumber(token.beginLine);
      break;
    case O_NIL:
    case O_FLOATCON:
    case O_INT:
      factorNode = constant();
      break;
    case O_CHAR:
      factorNode = character();
      break;
    case O_LPAREN:
      token = jj_consume_token(O_LPAREN);
      fNode = expr();
      jj_consume_token(O_RPAREN);
                            factorNode = ((ParenthesisNode)factory.makeASTNode("ParenthesisNode"))
                                .addOperand(fNode)
                                        .addLineNumber(token.beginLine);
      break;
    case O_NOT:
      token = jj_consume_token(O_NOT);
      fNode = factor();
                            factorNode = ((NotExpressionNode)factory.makeASTNode("NotExpressionNode"))
                                .addOperand(fNode)
                                        .addLineNumber(token.beginLine);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableReferenceNode variable() throws ParseException {
        VariableReferenceNode varNode = null;
        VariableReferenceNode elemNode = null;
        ExpressionNode exprNode = null;
        Token name;
    name = jj_consume_token(O_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_LBRACKET:
    case O_DOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LBRACKET:
        jj_consume_token(O_LBRACKET);
        exprNode = expr();
        jj_consume_token(O_RBRACKET);
        break;
      case O_DOT:
        jj_consume_token(O_DOT);
        elemNode = variable();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
                        if (exprNode == null)
                                if (elemNode == null)
                                        varNode = ((ScalarReferenceNode)factory.makeASTNode("ScalarReferenceNode"))
                                                .addName(name.image)
                                                .addLineNumber(name.beginLine);
                                else
                                {
                                        varNode = ((RecordReferenceNode)factory.makeASTNode("RecordReferenceNode"))
                                                .addName(name.image)
                                                .addElement(elemNode)
                                                .addLineNumber(name.beginLine);
                            }
                        else {
                        varNode = ((ArrayReferenceNode)factory.makeASTNode("ArrayReferenceNode"))
                                .addName(name.image)
                                .addSubscript(exprNode)
                                        .addLineNumber(name.beginLine);
                        }

                        {if (true) return varNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantNode constant() throws ParseException {
        ConstantNode constNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INT:
      constNode = integer();
      break;
    case O_FLOATCON:
      constNode = floatConst();
      break;
    case O_NIL:
      constNode = pointerConst();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return constNode;}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerConstNode integer() throws ParseException {
        IntegerConstNode intNode;
        Token intConst;
    intConst = jj_consume_token(O_INT);
            {if (true) return ((IntegerConstNode)factory.makeASTNode("IntegerConstNode"))
                .addValue(Integer.valueOf(intConst.image).intValue())
                        .addLineNumber(intConst.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatConstNode floatConst() throws ParseException {
        FloatConstNode floatNode;
        Token floatConst;
    floatConst = jj_consume_token(O_FLOATCON);
                {if (true) return ((FloatConstNode)factory.makeASTNode("FloatConstNode"))
                        .addValue(Float.valueOf(floatConst.image).floatValue())
                                .addLineNumber(floatConst.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public NilNode pointerConst() throws ParseException {
  NilNode pNode;
  Token nilConst;
    nilConst = jj_consume_token(O_NIL);
    {if (true) return (NilNode)factory.makeASTNode("NilNode")
        .addLineNumber(nilConst.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public CharacterNode character() throws ParseException {
        CharacterNode charNode;
        Token character;
    character = jj_consume_token(O_CHAR);
                {if (true) return ((CharacterNode)factory.makeASTNode("CharacterNode"))
                        .addValue(character.image.charAt(1))
                        .addLineNumber(character.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public StringNode string() throws ParseException {
        StringNode stringNode;
        Token string;
    string = jj_consume_token(O_STRING);
                    int length = string.image.length();
                    {if (true) return ((StringNode)factory.makeASTNode("StringNode"))
                        .addString(string.image.substring(1,length-1))
                        .addLineNumber(string.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(O_DOT)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(O_LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(O_ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(O_ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(O_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NolifeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x10000000,0x408000,0x2000000,0x0,0x0,0x0,0x24500,0x24400,0x24400,0x0,0x408000,0x10000000,0x0,0x24400,0x0,0x408000,0x0,0x0,0xe5010200,0xc0000,0xc0000,0x41000000,0x0,0x0,0x0,0x0,0x200080,0x0,0x0,0x40,0xc0000,0x0,0x0,0xc0000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x200,0x800000,0x400,0x800000,0x0,0x800000,0x4080000,0x0,0x0,0x2000,0x800000,0x2000,0x0,0x200,0x200,0x800000,0x6882001,0x6982001,0x0,0x6000001,0x200,0x400,0x400,0x0,0x7e,0x30000,0x40000,0x6882001,0xa800,0xa800,0x6882001,0x8800,0x8800,0x6000001,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NolifeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NolifeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NolifeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NolifeParser(NolifeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NolifeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
